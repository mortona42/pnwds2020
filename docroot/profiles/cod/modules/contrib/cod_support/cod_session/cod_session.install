<?php

/**
 * Add the session track vocabulary when cod_session is enabled the first time.
 */
function cod_session_install() {
  $eventQuery = new EntityFieldQuery();
  $events = $eventQuery->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'event')
    ->execute();
  if (isset($events['node'])) {
    $nids = array_keys($events['node']);
    foreach ($nids as $nid) {
      $event = node_load($nid);
      // Make a session track vocabulary.
      if (og_is_group('node', $event)) {
        cod_session_generate_session_tracks($event, 'node', TRUE);
      }
    }
  }
}

/**
 * Remove legacy views from the database.
 */
function cod_session_update_7001() {
  // Remove legacy views:
  $views = array('cod_session_schedule', 'cod_session_schedule_entity', 'my_presentations');

  foreach ($views as $view_name) {
    if ($view = views_get_view($view_name)) {
      $view->delete(TRUE);
    }
  }

  $revert = array(
    'cod_session' => array('field_base', 'field_instance', 'views_view'),
  );
  features_revert($revert);

  return array();
}

/**
 * Enable the OG Vocabulary (for session tracks) module.
 */
function cod_session_update_7002() {
  $module_list = array('og_vocab');
  module_enable($module_list);
  return array();
}

/**
 * Revert session features that use new flag3 API
 */
function cod_session_update_7003() {
  $revert = array(
    'cod_events' => array('flag', 'views_view'),
  );
  features_revert($revert);

  return array();
}

/**
 * Revert session features to include new featured and default session tab
 */
function cod_session_update_7004() {
  $revert = array(
    'cod_events' => array('field_base', 'field_instance', 'field_group'),
  );
  features_revert($revert);

  return array();
}

/**
 * Enable cod_session_pages
 */
function cod_session_update_7005() {
  module_enable(array('cod_session_pages'));
  return array();
}

function cod_session_update_7006() {
  $eventQuery = new EntityFieldQuery();
  $events = $eventQuery->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'event')
    ->execute();
  if (isset($events['node'])) {
    $nids = array_keys($events['node']);
    foreach ($nids as $nid) {
      $event = node_load($nid);
      if (og_is_group('node', $event)) {
        cod_session_generate_session_tracks($event, 'node', TRUE);
      }
    }
  }
}

/**
 * Enable set default session settings for events
 */
function cod_session_update_7007() {

  module_enable(array('cod_session_pages'));
  return array();
}

/**
 * Enable set default session settings for events
 */
function cod_session_update_7008() {
  $eventQuery = new EntityFieldQuery();
  $events = $eventQuery->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'event')
    ->execute();
  if (isset($events['node'])) {
    $nids = array_keys($events['node']);
    foreach ($nids as $nid) {
      $event = node_load($nid);

    }
  }

  return array();
}

/**
 * Enable set default session settings for events
 */
function cod_session_update_7009() {
  $revert = array(
    'cod_session' => array('views_view'),
  );
  features_revert($revert);

  return array();
}

/**
 * Rename administrative view menu locations and machine names.
 */
function cod_session_update_7010() {
  views_invalidate_cache();

  $revert = array(
    'cod_session' => array('views_view'),
  );
  features_revert($revert);

  return array();
}

<?php

/**
 * @file
 * Module file for dynamic menu item.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * @see dynamic_menu_item_form_node_form_submit()
 */
function dynamic_menu_item_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('dynamic_menu_item.settings');
  $node = $form_state->getFormObject()->getEntity();

  if (in_array($node->getType(), $config->get('enabled_content_types'))) {

    $form['promote']['dynamic_menu_item'] = [
      '#type' => 'checkboxes',
      '#options' => ['dynamic_menu_item' => $config->get('node_edit_option_title')],
    ];

    foreach (array_keys($form['actions']) as $action) {
      if (
        $action != 'preview' &&
        isset($form['actions'][$action]['#type']) &&
        $form['actions'][$action]['#type'] === 'submit'
      ) {
        $form['actions'][$action]['#submit'][] = 'dynamic_menu_item_form_node_form_submit';
      }
    }
  }
}

/**
 * Form submission handler for menu item field on the node form.
 *
 * @see menu_ui_form_node_form_alter()
 */
function dynamic_menu_item_form_node_form_submit($form, FormStateInterface $form_state) {
  if (!$form_state->isValueEmpty('dynamic_menu_item') 
    && $form_state->getValue('dynamic_menu_item')['dynamic_menu_item'] !== 0) {
    $node = $form_state->getFormObject()->getEntity();
    dynamic_menu_item_update_dynamic_menu_item($node->id());
  }
}

/**
 * Callback to create/update the menu item.
 */
function dynamic_menu_item_update_dynamic_menu_item($nid) {
  $config = \Drupal::config('dynamic_menu_item.settings');

  $menu_items = \Drupal::entityTypeManager()
    ->getStorage('menu_link_content')
    ->loadByProperties([
      'title' => $config->get('menu_item_title'),
      'weight' => $config->get('menu_item_weight'),
    ]);

  if (count($menu_items)) {
    // Ensure we can load menu item as it may have been manually deleted.
    $menu_link = MenuLinkContent::load(reset($menu_items)->id());
  }
  else {
    $menu_link = MenuLinkContent::create();
  }

  list($menu_name, $parent) = explode(':', $config->get('menu_item_parent'), 2);

  $menu_link
    ->set('title', $config->get('menu_item_title'))
    ->set('description', $config->get('menu_item_description'))
    ->set('link', ['uri' => 'internal:/node/' . $nid])
    ->set('menu_name', $menu_name)
    ->set('parent', $parent)
    ->set('weight', $config->get('menu_item_weight'))
    ->save();

}
